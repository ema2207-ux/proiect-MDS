set.seed(123)
if (!require("ggplot2")) install.packages("ggplot2")
# Generare date
studenti <- data.frame(
ID = 1:20,
Nume = paste("Student", 1:20),
Liceu = sample(c("Informatica", "Psihologie", "Economie"), 20, replace = TRUE),
Media = round(runif(20, 5, 10), 2),
Absente = sample(0:20, 20, replace = TRUE),
Activitati = sample(0:1, 20, replace = TRUE),
Feedback = sample(5:10, 20, replace = TRUE),
Mediu = sample(c("Urban", "Rural"), 20, replace = TRUE),  # Adăugat câmpul Mediu (Urban/Rural)
Clasa = sample(c("IX", "X", "XI", "XII"), 20, replace = TRUE)  # Adăugat câmpul Clasa (IX, X, XI, XII)
)
# 2. Citim datele
studenti <- read.csv("studenti.csv")
# 3. Statistici descriptive
cat("Statistici descriptive:\n")
summary(studenti)
cat("\nMedia generală a notelor:", mean(studenti$Media), "\n")
cat("Media generală a absențelor:", mean(studenti$Absente), "\n")
cat("Participare activități extracurriculare:\n")
print(table(studenti$Activitati))
# 4. Histogramă – Medii
ggplot(studenti, aes(x = Media)) +
geom_histogram(fill = "skyblue", color = "white", bins = 10) +
labs(title = "Distribuția Mediilor", x = "Media", y = "Număr studenți")
# 5. Scatterplot – Absențe vs Medii
ggplot(studenti, aes(x = Absente, y = Media)) +
geom_point(color = "tomato", size = 3) +
labs(title = "Relația dintre absențe și medii", x = "Nr. absențe", y = "Media")
# 6. Identificare studenți cu risc
studenti_risc <- studenti %>%
filter(Media < 6 | Absente > 10)
set.seed(123)
if (!require("ggplot2")) install.packages("ggplot2")
# Generare date
studenti <- data.frame(
ID = 1:20,
Nume = paste("Student", 1:20),
Liceu = sample(c("Informatica", "Psihologie", "Economie"), 20, replace = TRUE),
Media = round(runif(20, 5, 10), 2),
Absente = sample(0:20, 20, replace = TRUE),
Activitati = sample(0:1, 20, replace = TRUE),
Feedback = sample(5:10, 20, replace = TRUE),
Mediu = sample(c("Urban", "Rural"), 20, replace = TRUE),  # Adăugat câmpul Mediu (Urban/Rural)
Clasa = sample(c("IX", "X", "XI", "XII"), 20, replace = TRUE)  # Adăugat câmpul Clasa (IX, X, XI, XII)
)
library(readr)
library(readr)
library(shiny)
library(shinyjs)
library(ggplot2)
library(dplyr)
library(DT)
#Ce inseamna?
dbinom(3,5,0.4)
dbinom(0:5,5,0.4)
plot(0:10,dbinom(0:10,5,0.4), col="red")
lines(0:10,dbinom(0:10,5,0.4), col="red")
plot(0:10,dbinom(0:10,5,0.4), col="red")
lines(0:10,dbinom(0:10,5,0.4), col="red")
plot(0:10,dbinom(0:10,5,0.9), col="red")
lines(0:10,dbinom(0:10,5,0.9), col="red")
plot(0:10,dbinom(0:10,5,0.1), col="red")
lines(0:10,dbinom(0:10,5,0.1), col="red")
plot(0:100,dbinom(0:100,100,0.4), col="red")
lines(0:100,dbinom(0:100,100,0.4), col="red")
?dhyper
#dexp(x,lambda)
dexp(3,1) #NU mai e o probabilitate
library(gridExtra)
install.packages("grDevices")
# Export PDF
output$export_pdf <- downloadHandler(
filename = function() {
paste("analiza-studenti-", Sys.Date(), ".pdf", sep = "")
},
content = function(file) {
# Creare PDF temporar
pdf(file, width = 11, height = 8.5)
# Obține datele filtrate
df <- date_filtrate()
# Creare grafice
p1 <- ggplot(df, aes(x = Media)) +
geom_histogram(fill = "#3498db", bins = 15, color = "white") +
labs(title = "Distribuția mediilor", x = "Medie", y = "Număr studenți") +
theme_minimal()
p2 <- ggplot(df, aes(x = Absente, y = Media)) +
geom_point(color = "#e74c3c", alpha = 0.7, size = 3) +
geom_smooth(method = "lm", color = "#2c3e50") +
labs(title = "Corelația absențe-medie", x = "Absențe", y = "Medie") +
theme_minimal()
p3 <- ggplot(df, aes(x = Liceu, y = Media, fill = Liceu)) +
geom_boxplot() +
labs(title = "Medii pe licee", x = "", y = "Medie") +
theme_minimal() +
theme(legend.position = "none")
p4 <- ggplot(df, aes(x = Clasa, y = Media, fill = Clasa)) +
geom_boxplot() +
labs(title = "Medii pe clase", x = "", y = "Medie") +
theme_minimal() +
theme(legend.position = "none")
# Adaugă titlu general
grid::grid.text("Raport Analiză Studenți",
x = 0.5, y = 0.95,
gp = grid::gpar(fontsize = 20, fontface = "bold"))
# Adaugă subtitlu cu filtrele aplicate
filtre_text <- paste(
"Filtre aplicate:",
ifelse(input$liceu != "Toate", paste("Liceu:", input$liceu), ""),
ifelse(input$mediu != "Toate", paste("Mediu:", input$mediu), ""),
ifelse(input$clasa != "Toate", paste("Clasa:", input$clasa), ""),
paste("Interval medii:", input$media[1], "-", input$media[2]),
paste("Interval absențe:", input$absente[1], "-", input$absente[2]),
ifelse(input$activitati, "Doar cu activități extracuriculare", ""),
sep = "\n"
)
grid::grid.text(filtre_text,
x = 0.1, y = 0.9,
just = "left",
gp = grid::gpar(fontsize = 10))
# Adaugă statistici rapide
stats_text <- paste(
"Statistici rapide:",
paste("Studenți filtrați:", nrow(df)),
paste("Media generală:", round(mean(df$Media), 2)),
paste("Medie absențe:", round(mean(df$Absente), 1)),
paste("Participare activități:", sum(df$Activitati == "Da"), "/", nrow(df)),
sep = "\n"
)
grid::grid.text(stats_text,
x = 0.9, y = 0.9,
just = "right",
gp = grid::gpar(fontsize = 10))
# Afișează graficele
gridExtra::grid.arrange(p1, p2, nrow = 1)
gridExtra::grid.arrange(p3, p4, nrow = 1)
# Adaugă data și numele utilizatorului
grid::grid.text(paste("Generat la:", Sys.time(), "de", input$user),
x = 0.5, y = 0.02,
gp = grid::gpar(fontsize = 8))
# Închide PDF
dev.off()
install.packages("rmarkdown")
install.packages(c("rmarkdown", "knitr", "tinytex"))
tinytex::install_tinytex()  # Necesită o dată pentru LaTeX PDF export
cat("Se încearcă generarea PDF...\n")
library(rmarkdown)
df <- data.frame(
Nume = c("Ana", "Ion", "Mihai"),
Nota = c(9, 7, 10)
)
tempReport <- tempfile(fileext = ".Rmd")
writeLines(c(
"---",
"title: \"Test Export\"",
"output: pdf_document",
"---",
"",
"```{r, echo=FALSE}",
"knitr::kable(df, format = 'latex', booktabs = TRUE)",
"```"
), tempReport)
rmarkdown::render(tempReport, output_file = "test_output.pdf", envir = new.env())
source("test_export.R")
library(testthat)
test_that("media este calculată corect", {
note <- c(7, 8, 9)
expect_equal(mean(note), 8)
})
test_that("filtrarea după mediu urban funcționează", {
df <- data.frame(mediu = c("urban", "rural", "urban"))
df_urban <- df[df$mediu == "urban", ]
expect_equal(nrow(df_urban), 2)
})
rlang::last_trace()
library(shinytest2)
library(shinytest)
app$set_inputs(clasa_select = "12A")
test_dir("tests")
# Test pentru o funcție care calculează media notelor
test_that("media este calculată corect", {
note <- c(7, 8, 9)
expect_equal(mean(note), 8)
})
app$set_inputs(username = "admin", password = "1234")
app$set_inputs(username = "admin", password = "1234")
app <- AppDriver$new("C:\Users\PC\Desktop\proiect MDS\Proiect MDS")
app <- AppDriver$new("C:\Users\PC\Desktop\proiect MDS\Proiect MDS")
app <- AppDriver$new("PC\Desktop\proiect MDS\Proiect MDS")
app <- AppDriver$new("Desktop\proiect MDS\Proiect MDS")
test_that("Numărul de absențe este corect", {
studenti <- data.frame(Absente = c(3, 5, 2, 0))
absente_totale <- sum(studenti$Absente)
expect_equal(absente_totale, 10)
})
# Test pentru o funcție care calculează media notelor
test_that("media este calculată corect", {
note <- c(7, 8, 9)
expect_equal(mean(note), 8)
})
library(testthat)
# Test pentru o funcție care calculează media notelor
test_that("media este calculată corect", {
note <- c(7, 8, 9)
expect_equal(mean(note), 8)
})
# Test pentru numărul de absențe
test_that("Numărul de absențe este corect", {
studenti <- data.frame(Absente = c(3, 5, 2, 0))
absente_totale <- sum(studenti$Absente)
expect_equal(absente_totale, 10)
})
# Creează un test automat pentru aplicația Shiny
app <- ShinyDriver$new("cale_catre_aplicatia_ta")  # Specifică calea aplicației tale
library(testthat)
# Test pentru o funcție care calculează media notelor
test_that("media este calculată corect", {
note <- c(7, 8, 9)
expect_equal(mean(note), 8)
})
# Test pentru numărul de absențe
test_that("Numărul de absențe este corect", {
studenti <- data.frame(Absente = c(3, 5, 2, 0))
absente_totale <- sum(studenti$Absente)
expect_equal(absente_totale, 10)
})
library(shinytest)
output$hist_medii <- renderPlot({
start_time <- Sys.time()  # Timp început
df <- date_filtrate()
plot <- ggplot(df, aes(x = Media)) +
geom_histogram(fill = "#3498db", bins = 15, color = "white") +
labs(title = "Distribuția mediilor", x = "Medie", y = "Număr studenți") +
theme_minimal()
end_time <- Sys.time()  # Timp sfârșit
cat("Timpul de generare al histogramelor este:", end_time - start_time, "secunde\n")
plot
})
observeEvent(input$filtreaza, {
start_time <- Sys.time()  # Începem cronometrarea
# Aplicarea filtrului
df_filtered <- date_filtrate()
end_time <- Sys.time()  # Terminăm cronometrarea
cat("Timpul de procesare al filtrării este:", end_time - start_time, "secunde\n")
})
app <- ShinyDriver$new("C:/Users/PC/Desktop/proiect MDS/Proiect MDS")
validate_username <- function(username) {
if (username == "") {
return("Numele de utilizator nu poate fi gol.")
}
return(NULL)
}
library(testthat)
# Test pentru o funcție care calculează media notelor
test_that("media este calculată corect", {
note <- c(7, 8, 9)
expect_equal(mean(note), 8)
})
# Test pentru numărul de absențe
test_that("Numărul de absențe este corect", {
studenti <- data.frame(Absente = c(3, 5, 2, 0))
absente_totale <- sum(studenti$Absente)
expect_equal(absente_totale, 10)
})
# Funcția de validare pe care o vom testa
validate_username <- function(username) {
if (username == "") {
return("Numele de utilizator nu poate fi gol.")
}
return(NULL)
}
# Testul: Verifică dacă validarea funcționează corect
test_that("Validarea numelui de utilizator", {
# Test 1: Numele de utilizator valid
valid_username <- "test_user"
result <- validate_username(valid_username)
expect_null(result)  # Nu ar trebui să fie mesaje de eroare
# Test 2: Numele de utilizator gol
invalid_username <- ""
result <- validate_username(invalid_username)
expect_equal(result, "Numele de utilizator nu poate fi gol.")  # Verifică mesajul de eroare
})
install.packages("profvis")
library(profvis)
library(profvis)
test_function <- function() {
# Crearea unui vector mare
large_vector <- rnorm(1000000)
# Calculul mediei
mean_value <- mean(large_vector)
# Calculul sumelor parțiale
partial_sums <- cumsum(large_vector)
# Returnarea valorilor
return(list(mean = mean_value, sums = partial_sums))
}
# Profilarea funcției
profvis({
result <- test_function()
})
library(profvis)
test_function <- function() {
# Crearea unui vector mare
large_vector <- rnorm(1000000)
# Calculul mediei
mean_value <- mean(large_vector)
# Calculul sumelor parțiale
partial_sums <- cumsum(large_vector)
# Returnarea valorilor
return(list(mean = mean_value, sums = partial_sums))
}
# Profilarea funcției
profvis({
result <- test_function()
})
profvis({
result <- test_function()
})
return(list(mean = mean_value, sums = partial_sums))
library(profvis)
test_function <- function() {
# Crearea unui vector mare
large_vector <- rnorm(1000000)
# Calculul mediei
mean_value <- mean(large_vector)
# Calculul sumelor parțiale
partial_sums <- cumsum(large_vector)
# Returnarea valorilor
return(list(mean = mean_value, sums = partial_sums))
}
# Profilarea funcției
profvis({
result <- test_function()
})
